// Code generated by raf using Material interface.
// - Current Task ID: 68c99a0006732509e6307fbb.
// - Root Task ID: 68c99a0006732509e6307fbb.
// - Schema Name: quote.
// - Resource ID: 102019953858512799f992865818ca392e8.
// - Version: 10201995384f34d7075a8ddce3bd8f57ece.

import { DataType } from "./common";
import type { Value, Page, Index, Filter, Sort, Data } from "./common";
import { DataStoreClient, CreateData, CreateValue, ParseValue } from "./client";







/**
 * Enumeration for QuoteStatus
 */
export enum QuoteStatus {
  Unspecified = 0,
  Requested = 1,
  Sent = 2,
  Accepted = 3,
  Rejected = 4,
  Expired = 5,
}



/**
 * Interface for QuoteModel
 * `id`, `data_creator`, `data_updater`, `create_time`, `update_time` should not be set when INSERTING data since backend will fill it automatically.
 * `id` should keep the original value when setting (updating) data.
 * `data_creator` and `data_updater` are read-only strings (user id) representing the creator and updater of the data record.
 * `create_time` and `update_time` are read-only strings in the format of timestamp (10-digit).
 */
export interface QuoteModel {
  id: string;
  job_id: string;
  company_id: string;
  customer_id: string;
  amount: number;
  currency: string;
  details?: string | null;
  expiration_time: string;
  status: QuoteStatus;
  data_creator: string;
  data_updater: string;
  create_time: string;
  update_time: string;
}

/**
 * ORM class for Quote entity.
 * It uses Singleton pattern to prevent re-initialization.
 */
export class QuoteORM {
  private static instance: QuoteORM | null = null;
  protected client: DataStoreClient;
  protected entityId: string;
  protected entityVersion: string;

  private constructor() {
    this.client = DataStoreClient.getInstance();
    this.entityId = '102019953858512799f992865818ca392e8';
    this.entityVersion = '10201995384f34d7075a8ddce3bd8f57ece';
  }

  /**
   * Get singleton instance of QuoteORM
   */
  public static getInstance(): QuoteORM {
    if (!QuoteORM.instance) {
      QuoteORM.instance = new QuoteORM();
    }
    
    return QuoteORM.instance;
  }

  /**
   * Get all Quote records
   * This returns all data without pagination.
   * To query data with page and filter conditions, use `list*()` instead.
   */
  async getAllQuote(): Promise<QuoteModel[]> {
    const response = await this.client.all({
      id: this.entityId,
      version: this.entityVersion,
      format: {
        structured: true
      }
    });
    return this.resultToData(response.data?.values || []);
  }

  /**
   * Insert (create) new Quote record(s)
   * DO NOT SET `id`, `data_creator`, `data_updater`, `create_time` and `update_time` since backend will fill it automatically.
   * It will respond the inserted record(s), with `id`, `data_creator`, `data_updater`, `create_time` and `update_time` filled by backend.
   */
  async insertQuote(data: QuoteModel[]): Promise<QuoteModel[]> {
    const structured = data.map((item) => CreateData(QuoteModelToValues(item)));
    const response = await this.client.insert({
      id: this.entityId,
      version: this.entityVersion,
      batch: structured,
      format: {
        structured: true
      }
    });
    return this.resultToData(response.data?.values || []);
  }

  /**
   * Purge all Quote records
   */
  async purgeAllQuote(): Promise<void> {
    await this.client.purge({
      id: this.entityId,
      version: this.entityVersion,
      format: {
        structured: true
      }
    });
  }

  /**
   * List Quote records with filters
   * This function provides search capabilities like filtering, sorting, pagination.
   */
  async listQuote(filter?: Filter, sort?: Sort, paginate?: Page): Promise<[QuoteModel[], Page]> {
    const response = await this.client.list({
      id: this.entityId,
      version: this.entityVersion,
      filter: filter,
      sort: sort,
      paginate: paginate,
      format: {
        structured: true
      }
    });
    return [this.resultToData(response.data?.values || []), response.data?.page || { number: 0, size: 0 }];
  }


  /**
   * Get quote by Id index
   * This function gets data by index.
   */
  async getQuoteById(
    id: string,
  ): Promise<QuoteModel[]> {
    const index = createIndexId(
      id
    );

    const response = await this.client.get({
      id: this.entityId,
      version: this.entityVersion,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) quote by Id index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setQuoteById(
    id: string,
    data: QuoteModel
  ): Promise<QuoteModel[]> {
    const index = createIndexId(
      id
    );

    const values = QuoteModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      version: this.entityVersion,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete quote by Id index
   */
  async deleteQuoteById(
    id: string
  ): Promise<void> {
    const index = createIndexId(
      id
    );

    await this.client.delete({
      id: this.entityId,
      version: this.entityVersion,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get quote by CompanyIdJobId index
   * This function gets data by index.
   */
  async getQuoteByCompanyIdJobId(
    company_id: string,
    job_id: string,
  ): Promise<QuoteModel[]> {
    const index = createIndexCompanyIdJobId(
      company_id,
      job_id
    );

    const response = await this.client.get({
      id: this.entityId,
      version: this.entityVersion,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) quote by CompanyIdJobId index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setQuoteByCompanyIdJobId(
    company_id: string,
    job_id: string,
    data: QuoteModel
  ): Promise<QuoteModel[]> {
    const index = createIndexCompanyIdJobId(
      company_id,
      job_id
    );

    const values = QuoteModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      version: this.entityVersion,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete quote by CompanyIdJobId index
   */
  async deleteQuoteByCompanyIdJobId(
    company_id: string,
    job_id: string
  ): Promise<void> {
    const index = createIndexCompanyIdJobId(
      company_id,
      job_id
    );

    await this.client.delete({
      id: this.entityId,
      version: this.entityVersion,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get quote by JobId index
   * This function gets data by index.
   */
  async getQuoteByJobId(
    job_id: string,
  ): Promise<QuoteModel[]> {
    const index = createIndexJobId(
      job_id
    );

    const response = await this.client.get({
      id: this.entityId,
      version: this.entityVersion,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) quote by JobId index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setQuoteByJobId(
    job_id: string,
    data: QuoteModel
  ): Promise<QuoteModel[]> {
    const index = createIndexJobId(
      job_id
    );

    const values = QuoteModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      version: this.entityVersion,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete quote by JobId index
   */
  async deleteQuoteByJobId(
    job_id: string
  ): Promise<void> {
    const index = createIndexJobId(
      job_id
    );

    await this.client.delete({
      id: this.entityId,
      version: this.entityVersion,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get quote by CompanyId index
   * This function gets data by index.
   */
  async getQuoteByCompanyId(
    company_id: string,
  ): Promise<QuoteModel[]> {
    const index = createIndexCompanyId(
      company_id
    );

    const response = await this.client.get({
      id: this.entityId,
      version: this.entityVersion,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) quote by CompanyId index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setQuoteByCompanyId(
    company_id: string,
    data: QuoteModel
  ): Promise<QuoteModel[]> {
    const index = createIndexCompanyId(
      company_id
    );

    const values = QuoteModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      version: this.entityVersion,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete quote by CompanyId index
   */
  async deleteQuoteByCompanyId(
    company_id: string
  ): Promise<void> {
    const index = createIndexCompanyId(
      company_id
    );

    await this.client.delete({
      id: this.entityId,
      version: this.entityVersion,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get quote by CustomerId index
   * This function gets data by index.
   */
  async getQuoteByCustomerId(
    customer_id: string,
  ): Promise<QuoteModel[]> {
    const index = createIndexCustomerId(
      customer_id
    );

    const response = await this.client.get({
      id: this.entityId,
      version: this.entityVersion,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) quote by CustomerId index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setQuoteByCustomerId(
    customer_id: string,
    data: QuoteModel
  ): Promise<QuoteModel[]> {
    const index = createIndexCustomerId(
      customer_id
    );

    const values = QuoteModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      version: this.entityVersion,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete quote by CustomerId index
   */
  async deleteQuoteByCustomerId(
    customer_id: string
  ): Promise<void> {
    const index = createIndexCustomerId(
      customer_id
    );

    await this.client.delete({
      id: this.entityId,
      version: this.entityVersion,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get quote by Status index
   * This function gets data by index.
   */
  async getQuoteByStatus(
    status: QuoteStatus,
  ): Promise<QuoteModel[]> {
    const index = createIndexStatus(
      status
    );

    const response = await this.client.get({
      id: this.entityId,
      version: this.entityVersion,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) quote by Status index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setQuoteByStatus(
    status: QuoteStatus,
    data: QuoteModel
  ): Promise<QuoteModel[]> {
    const index = createIndexStatus(
      status
    );

    const values = QuoteModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      version: this.entityVersion,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete quote by Status index
   */
  async deleteQuoteByStatus(
    status: QuoteStatus
  ): Promise<void> {
    const index = createIndexStatus(
      status
    );

    await this.client.delete({
      id: this.entityId,
      version: this.entityVersion,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get quote by DataCreator index
   * This function gets data by index.
   */
  async getQuoteByDataCreator(
    data_creator: string,
  ): Promise<QuoteModel[]> {
    const index = createIndexDataCreator(
      data_creator
    );

    const response = await this.client.get({
      id: this.entityId,
      version: this.entityVersion,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) quote by DataCreator index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setQuoteByDataCreator(
    data_creator: string,
    data: QuoteModel
  ): Promise<QuoteModel[]> {
    const index = createIndexDataCreator(
      data_creator
    );

    const values = QuoteModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      version: this.entityVersion,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete quote by DataCreator index
   */
  async deleteQuoteByDataCreator(
    data_creator: string
  ): Promise<void> {
    const index = createIndexDataCreator(
      data_creator
    );

    await this.client.delete({
      id: this.entityId,
      version: this.entityVersion,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get quote by DataUpdater index
   * This function gets data by index.
   */
  async getQuoteByDataUpdater(
    data_updater: string,
  ): Promise<QuoteModel[]> {
    const index = createIndexDataUpdater(
      data_updater
    );

    const response = await this.client.get({
      id: this.entityId,
      version: this.entityVersion,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) quote by DataUpdater index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setQuoteByDataUpdater(
    data_updater: string,
    data: QuoteModel
  ): Promise<QuoteModel[]> {
    const index = createIndexDataUpdater(
      data_updater
    );

    const values = QuoteModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      version: this.entityVersion,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete quote by DataUpdater index
   */
  async deleteQuoteByDataUpdater(
    data_updater: string
  ): Promise<void> {
    const index = createIndexDataUpdater(
      data_updater
    );

    await this.client.delete({
      id: this.entityId,
      version: this.entityVersion,
      index: index,
      format: {
        structured: true
      }
    });
  }

  /**
   * Convert result data to QuoteModel data array
   */
  private resultToData(values: Data[]): QuoteModel[] {
    return values.map((item: Data) => {
      if (item.structured && item.structured.length > 0) {
        return QuoteModelFromValues(item.structured);
      }

      if (item.serialized) {
        try {
          const parsedData = JSON.parse(item.serialized) as QuoteModel;
          return parsedData;
        } catch (error) {
          console.error('Error parsing serialized QuoteModel data: ', error, item.serialized);
          return null;
        }
      }

      return null;
    }).filter((item): item is QuoteModel => item !== null);
  }
}

/**
 * Convert QuoteModel data to Value array
 */
function QuoteModelToValues(data: QuoteModel): Value[] {
  const fieldMappings = [
    { key: 'id', type: DataType.string, defaultValue: '' },
    { key: 'job_id', type: DataType.string, defaultValue: '' },
    { key: 'company_id', type: DataType.string, defaultValue: '' },
    { key: 'customer_id', type: DataType.string, defaultValue: '' },
    { key: 'amount', type: DataType.number, defaultValue: 0 },
    { key: 'currency', type: DataType.string, defaultValue: '' },
    { key: 'details', type: DataType.string, defaultValue: null },
    { key: 'expiration_time', type: DataType.string, defaultValue: '' },
    { key: 'status', type: DataType.enumeration, defaultValue: 0 },
    { key: 'data_creator', type: DataType.string, defaultValue: '' },
    { key: 'data_updater', type: DataType.string, defaultValue: '' },
    { key: 'create_time', type: DataType.string, defaultValue: '' },
    { key: 'update_time', type: DataType.string, defaultValue: '' },
  ];

  return fieldMappings.map(({ key, type, defaultValue }) => {
    const value = data[key as keyof QuoteModel] ?? defaultValue;
    return CreateValue(type, value, key);
  });
}

/**
 * Convert Value array to QuoteModel data
 */
function QuoteModelFromValues(values: Value[]): QuoteModel {
  const data: Partial<QuoteModel> = {};
  
  for (const value of values) {
    if (!value.name) continue;
    
    switch (value.name) {
      case 'id':
        data.id = ParseValue(value, DataType.string) as string;
        break;
      case 'job_id':
        data.job_id = ParseValue(value, DataType.string) as string;
        break;
      case 'company_id':
        data.company_id = ParseValue(value, DataType.string) as string;
        break;
      case 'customer_id':
        data.customer_id = ParseValue(value, DataType.string) as string;
        break;
      case 'amount':
        data.amount = ParseValue(value, DataType.number) as number;
        break;
      case 'currency':
        data.currency = ParseValue(value, DataType.string) as string;
        break;
      case 'details':
        data.details = ParseValue(value, DataType.string) as string | null;
        break;
      case 'expiration_time':
        data.expiration_time = ParseValue(value, DataType.string) as string;
        break;
      case 'status':
        data.status = ParseValue(value, DataType.enumeration) as QuoteStatus;
        break;
      case 'data_creator':
        data.data_creator = ParseValue(value, DataType.string) as string;
        break;
      case 'data_updater':
        data.data_updater = ParseValue(value, DataType.string) as string;
        break;
      case 'create_time':
        data.create_time = ParseValue(value, DataType.string) as string;
        break;
      case 'update_time':
        data.update_time = ParseValue(value, DataType.string) as string;
        break;
    }
  }
  
  return data as QuoteModel;
}


/**
 * Create index for Id fields
 */
function createIndexId(
  id: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, id, 'id'),
  ];

  return {
    fields: ['id'],
    values
  };
}
/**
 * Create index for CompanyIdJobId fields
 */
function createIndexCompanyIdJobId(
  company_id: string,
  job_id: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, company_id, 'company_id'),
    CreateValue(DataType.string, job_id, 'job_id'),
  ];

  return {
    fields: ['company_id', 'job_id'],
    values
  };
}
/**
 * Create index for JobId fields
 */
function createIndexJobId(
  job_id: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, job_id, 'job_id'),
  ];

  return {
    fields: ['job_id'],
    values
  };
}
/**
 * Create index for CompanyId fields
 */
function createIndexCompanyId(
  company_id: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, company_id, 'company_id'),
  ];

  return {
    fields: ['company_id'],
    values
  };
}
/**
 * Create index for CustomerId fields
 */
function createIndexCustomerId(
  customer_id: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, customer_id, 'customer_id'),
  ];

  return {
    fields: ['customer_id'],
    values
  };
}
/**
 * Create index for Status fields
 */
function createIndexStatus(
  status: QuoteStatus
): Index {
  const values: Value[] = [
    CreateValue(DataType.enumeration, status, 'status'),
  ];

  return {
    fields: ['status'],
    values
  };
}
/**
 * Create index for DataCreator fields
 */
function createIndexDataCreator(
  data_creator: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, data_creator, 'data_creator'),
  ];

  return {
    fields: ['data_creator'],
    values
  };
}
/**
 * Create index for DataUpdater fields
 */
function createIndexDataUpdater(
  data_updater: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, data_updater, 'data_updater'),
  ];

  return {
    fields: ['data_updater'],
    values
  };
}

export default QuoteORM;